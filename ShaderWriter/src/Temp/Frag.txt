#version 460 core
	
out vec4 FragColor;

uniform sampler2D albedoMap;
uniform vec3 lightPos;
uniform vec3 cameraPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 ambientColor; // new uniform for ambient light

in vec3 Normal;
in vec3 FragPos;

void main()
{
	// Ambient term
	vec3 ambient = ambientColor * objectColor;
	// Calculate lighting
	vec3 lightDir = normalize(lightPos - FragPos);
	vec3 viewDir = normalize(cameraPos - FragPos);
	vec3 halfwayDir = normalize(lightDir + viewDir);

	// Diffuse term
	float diff = max(dot(Normal, lightDir), 0.0);
	vec3 diffuse = diff * lightColor * objectColor;

	// Specular term
	float spec = pow(max(dot(Normal, halfwayDir), 0.0), 32.0);
	vec3 specular = spec * lightColor;

	// Final color output
	FragColor = vec4(ambientColor * objectColor + diffuse + specular , 1.0);
}