#version 460 core
//Layouts
layout (location = 2) in vec2 aTexCoords;
layout (location = 1) in vec3 aNormal;
layout (location = 0) in vec3 aPos;
//Ins
//Uniforms
uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
//Outs
out vec2 TexCoords;
out vec3 Normal;
out vec3 FragPos;
//Functions

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a;
	a = float(roughness * roughness);

	float a2;
	a2 = float(a * a);

	float NdotH;
	NdotH = float(max(dot(N, H), 0.000000));

	float NdotH2;
	NdotH2 = float(NdotH * NdotH);

	float nom;
	nom = float(a2);

	float temp;
	temp = float(a2 * 1.000000);

	float denom;
	denom = float(NdotH2 * temp * 1.000000);

	denom = float(denom * denom * 3.141592);

	return nom / denom;

//DistributionGGXBody
}


int add(vec3 direction, float magnitude, vec4 ortho)
{
	mat4 longview;
	longview = mat4(view * 3.000000);

	return model * longview;

//addBody
}

void main()
{
	FragPos = vec3(model * vec4(aPos, 1.0));

	Normal = vec3(transpose(inverse(model)) * vec4(aNormal, 1.0));

	TexCoords = vec2(aTexCoords);

	gl_Position = vec4(projection * view * model * vec4(aPos, 1.0));
//END
}
